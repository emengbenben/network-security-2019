<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is modified by Seth Nielson for creating P-RFC's
    (Playground-RFC's). -->
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml2rfc.ietf.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced. 
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2360 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC0793 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0793.xml">


<!--ENTITY PRFC001 SYSTEM "https://github.com/CrimsonVista/NetworkSecurityFall2018/blob/master/prfc/authoring/p_rfc_1.xml"-->
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml2rfc.ietf.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->

<rfc category="std" docName="rfc2" ipr="playgroundStd_v1_0" number="2">
 <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902, playgroundWinter201501
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

 <front>
   <!-- The abbreviated title is used in the page header - it is only necessary if the 
        full title is longer than 39 characters -->

   <title abbrev="GDP">GoNuts Delivery Protocol</title>

   <!-- add 'role="editor"' below for the editors if appropriate -->

   <!-- Another author who claims to be an editor -->

   <author fullname="Golden Nugget" initials="G.N." role="editor"
           surname="Nugget">
     <organization>JHU Network Security Spring 2019</organization>

     <address>
       <postal>
         <street>JHU Malone MSSI Lab</street>

         <!-- Reorder these if your country does things differently -->

         <city>Baltimore</city>

         <region>MD</region>

         <code>21218</code>

         <country>USA</country>
       </postal>

       <phone>+1 123-456-7891</phone>

       <email>golden_nugget@jhu.edu</email>

       <!-- uri and facsimile elements may also be added -->
     </address>
   </author>

   <date year="2019" />

   <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
        in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

   <!-- Meta-data Declarations -->

   <area>General</area>

   <workgroup>Network Working Group</workgroup>

   <!-- WG name at the upper left corner of the doc,
        IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
        which is used by the RFC Editor as a nod to the history of the IETF. -->

   <keyword>PRFC</keyword>

   <!-- Keywords will be incorporated into HTML output
        files in a meta tag but they have no effect on text or on
        output. If you submit your draft to the RFC Editor, the
        keywords will be used for the search engine. -->

   <abstract>
     <t>This document describes the GoNuts Delivery Protocol (GDP). This protocol shall
     reliably transmit data over the network and also add a layer of security to this data transmission.</t>
   </abstract>

 </front>

 <middle>

   <section title="Introduction">
     <section title="Overview">
       <t>The GoNuts Delivery Protocol (GDP) is a connection-oriented protocol that
       provides reliable transmission of data throughout the PLAYGROUND system. It provides secure and reliable nugget delivery over the network. It
       exists at the Layer 4 (transport layer) of the OSI 
       model. The reliable transmission of data means that the data is in order, reasonably
       error-free, and guaranteed to be delivered until the meal is over. The security of the nugget is achieved by using 3 flags - F,R and G which are used to set the mode of encryption by
       which the data is sent. </t>
  
       <t>The PLAYGROUND system is designed to give students and researchers a sandbox
       in which to develop network security experiments. For PLAYGROUND experiments that
       involve a PETF (Playground Engineering Task Force), PRFC's (Playground RFC's) are
       used in a manner similar to RFC's.</t>
     </section>

     <section title="Purpose">
       <t>This memorandum describes the specification of the GDP and how to implement it
       within the PLAYGROUND system. It includes the establishment of the meal as well
       as the transmission of the data.</t>       
     </section>

     <section title="Requirements Language">
       <t>ServerSauce: indicates the digital cert from Server </t>
       <t>ClientSauce: indicates the digital cert from Client </t>
       <t>Nugget: indicates the packet</t>
       <t>Meal: indicates the session</t>
       <t>MealTicket: indicates the session.id </t>
       <t>SauceFactory: repository that contains digital certs from the server and the client </t>
     </section>
   </section>
   
   <section title="Functional Specification">

     <section title="Packet Descriptions">
  
 <t><figure><artwork><![CDATA[      
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
|                         Sequence Number                       |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
|                       Acknowledgment Number                   |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Data  |       | | | |P|F|R|A|S|                               |
|Offset |Reserve|F|R|G|S|I|S|C|Y|           Checksum            |
|       |       | | | |H|N|T|K|N|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                               |               |
|                    Options                    |    Padding    |
|                                               |               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
|                              data                             |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 ]]></artwork></figure></t>
       <t>A "nugget" is defined as a packet in GDP. The following list defines
       the data types used for fields within a nugget:</t>
	     <t><list style="empty">
         <t>BOOL:  a boolean data type; has a value of true or false</t>
         <t>BUFFER:  a sequence of bytes</t>
         <t>UINT32:  an unsigned 32-bit integer</t>
         <t>UINT6:  an unsigned 6-bit integer</t>
         <t>UINT4:  an unsigned 4-bit integer</t>
         <t>LIST(UINT64):  a list of multiple UINT64's</t>
       </list></t>

       <t>Below is the composition of a GDP nugget and the definition for each field. Note
       that some fields within this nugget have similar definitions to the fields in a
       Transmission Control Protocol (TCP) nugget as defined in <xref target="RFC0793">RFC 793</xref>.</t>
       
       <t>GDP Nugget</t>
	     <t><list style="empty">
         <t>("seqNumber", UINT32),</t>
         <t>("ackNumber", UINT32),</t>
         <t>("dataOffset", LIST(UINT4)),</t>
         <t>("reserve", UINT6),</t>
         <t>("dataSegment", BUFFER)</t>
         <t>("FFlag", BOOL),</t>
         <t>("RFlag", BOOL),</t>
         <t>("GFlag", BOOL),</t>
         <t>("pshFlag", BOOL),</t>
         <t>("rstFlag", BOOL),</t>
         <t>("finFlag", BOOL),</t>
         <t>("synFlag", BOOL), </t>
         <t>("ackFlag", BOOL), </t>
       </list></t>

       <t>seqNumber: The sequence number of the nugget.</t>

       <t>ackNumber: The acknowledgement number of the nugget.</t>

       <t>dataOffset: sets the offset for the nugget</t>

       <t>dataSegment: The data being transmitted in the nugget</t>
       
       <t>FFlag: The flag to set AES</t>
       
       <t>RFlag: The flag to set twoFish</t>
       
       <t>GFlag: The flag to set threeFish</t>
       
       <t>synFlag: The flag to synchronize sequence numbers.</t>

       <t>ackFlag: The flag to acknowledge an accepted transmission.</t>

       <t>finFlag: The flag indicating that there is no more data from the sender; it is also used at the time of session termination.</t>

       <t>pshFlag: The flag to indicate that data is to be pushed through from the sender to
       the receiver.</t>

       <t>rstFlag: The flag to indicate a reset of the connection.</t>

       <t>reserve: It is to add any other fields that we need in the nugget. It is an address space to expand any of the other components of the nugget</t>
     </section>

     
    <section title="Session Establishment">
       <t>To establish a meal, the GDP shall use a four-way handshake, namely (1) SYN, (2) SYN+ACK, (3) ACK_Client, and (4)Ack_Server.</t>
        <t> 1. A client node sends a SYN nugget over an IP network to a server. The objective of this nugget is to request if the server is open for new connections.</t>
				<t> 2. The target server must have open ports that can accept and initiate new connections. When the server receives the SYN nugget from the client node, it responds and returns a SYN+ACK nugget
        with F, R, G flag set to the encryption libraries available with the server. In the example below the SYN+ACK packet has the F|R|G set to 111 which implies that the server
          has all the three excryption libraries to use for the data transmission. The data of this packet will include MealTicket which is Sequence number of SYN packet + nounce, which is work like a session id.
       The body will also include the ServerSauce, which is a digital certificate of the server.</t>
				<t> 3. The client node receives the SYN+ACK nugget from the server and responds with a Ack_Client nugget and selects one of the encryption schemes that the server mentioned.
        In this example the client send the FFlag set to 1, which implies that the client wants to use AES Encryption libraries. The data of this packet will include the same MealTicket given by the server in the previous packet
       as well as the ClientSauce which will be the Digital Certificate to verify the client. Along with the above parameters the data also includes a MasterKey that the client generates.</t>
				<t> 4. Now the target server receives the acknowledgement nugget ACK_Client from the client node and then sends back an ACK nugget Ack_Server and in the data of this packet will be the
          Digest which will contain the key for all the communication and this key will key will be derieved from the master key using any algorithm the server wishes to use. This Digest will be encrypted using the ClientSauce key.
        Upon completion of this process, the connection is created and the host and server can communicate.</t>

       <t> Note that the initial sequence number for the sender and receiver is generated
       randomly to ensure that the number is not being used within an existing connection.</t>
       
       <t>SYN Nugget</t>
       <t><figure><artwork><![CDATA[
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                       Sequence Number = A                     |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                    Acknowledgment Number = 0                  |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | Data  |       | | | |P|F|R|A|S|                               |
      |Offset |Reserve|F|R|G|S|I|S|C|Y|       Checksum =              |
      |       |       | | | |H|N|T|K|N|       tcp_cal_chksum()        |
      |       |       |0|0|0|0|0|0|0|1|                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                               |               |
      |                    Options                    |    Padding    |
      |                                               |               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                              data                             |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
		  ]]></artwork></figure></t>
       
      <t>SYN+ACK Nugget</t>
      <t><figure><artwork><![CDATA[
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                        Sequence Number = B                    |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                   Acknowledgment Number = A + 1               |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | Data  |       | | | |P|F|R|A|S|                               |
      |Offset |Reserve|F|R|G|S|I|S|C|Y|           Checksum =          |
      |       |       | | | |H|N|T|K|N|       tcp_cal_chksum()        |
      |       |       |1|1|1|0|0|0|1|1|                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                               |               |
      |                    Options                    |    Padding    |
      |                                               |               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |              data = MealTicket + ServerSauce                  |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ]]></artwork></figure></t>
       
      <t>ACK_Client Nugget</t>
      <t><figure><artwork><![CDATA[
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                     Sequence Number = A + 1                   |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                 Acknowledgment Number = B + 1                 |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | Data  |       | | | |P|F|R|A|S|                               |
      |Offset |Reserve|F|R|G|S|I|S|C|Y|           Checksum =          |
      |       |       | | | |H|N|T|K|N|       tcp_cal_chksum()        |   
      |       |       |1|0|0|0|0|0|1|0|                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                               |               |
      |                    Options                    |    Padding    |
      |                                               |               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |          data = MealTicket + ClientSauce  + MasterKey         |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
		  ]]></artwork></figure></t>
       
       <t>ACK_Server Nugget</t>
			 <t><figure><artwork><![CDATA[
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                    Sequence Number = B + 1                    |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                 Acknowledgment Number = A + 2                 |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | Data  |       | | | |P|F|R|A|S|                               |
      |Offset |Reserve|F|R|G|S|I|S|C|Y|           Checksum =          |
      |       |       | | | |H|N|T|K|N|       tcp_cal_chksum()        |
      |       |       |1|0|0|0|0|0|1|0|                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                               |               |
      |                    Options                    |    Padding    |
      |                                               |               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |              data = MealTicket + digest                       |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
		  ]]></artwork></figure></t>

     </section>

     <section title="Session Termination">
       <t>A session begins closing when either the sender sends a [FIN] nugget. The reciever must send 
         an [ACK] nugget for this. This is one-way meal termination. To complete the meal termination process, the 
         receiver must send a [FIN] nugget and the sender must send an [ACK] nugget as well. This is how the
         meal termination takes place. In all the [FIN] packets, the finFlag is set to 1.
       </t>
       
       <t> After the sender transmits a nugget with a finFlag, it waits on a response from
       the receiver. The receiver successfully accepts the nugget. The receiver then transmits a nugget
       with the finFlag and ackFlag set, to the sender. The receiver waits for a response from the
       sender. The sender receives the nugget. After sending the receiver a nugget with the
       finFlag and ackFlag, the sender closes its connection.  When the receiver obtains the
       nugget (with the finFlag and ackFlag), it closes its connection.  At this point,
       the meal is terminated.</t>
       
      <t>FIN_Client Nugget</t>
      <t><figure><artwork><![CDATA[ 
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                         Sequence Number                       |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                       Acknowledgment Number                   |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | Data  |       | | | |P|F|R|A|S|                               |
      |Offset |Reserve|F|R|G|S|I|S|C|Y|           Checksum = tcp      |
      |       |       | | | |H|N|T|K|N|                               |
      |       |       |0|0|0|0|1|0|0|0|                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                               |               |
      |                    Options                    |    Padding    |
      |                                               |               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                    data = MealTicket                          |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ]]></artwork></figure></t>
      <t>ACK_Server Nugget</t>
      <t><figure><artwork><![CDATA[
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                         Sequence Number                       |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                       Acknowledgment Number                   |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | Data  |       | | | |P|F|R|A|S|                               |
      |Offset |Reserve|F|R|G|S|I|S|C|Y|           Checksum =          |
      |       |       | | | |H|N|T|K|N|       tcp_cal_chksum()        |
      |       |       |0|0|0|0|1|0|1|0|                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                               |               |
      |                    Options                    |    Padding    |
      |                                               |               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |              data = MealTicket + digests                      |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ]]></artwork></figure></t>
      <t>FIN_Server Nugget</t>
      <t><figure><artwork><![CDATA[
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                         Sequence Number                       |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                       Acknowledgment Number                   |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | Data  |       | | | |P|F|R|A|S|                               |
      |Offset |Reserve|F|R|G|S|I|S|C|Y|           Checksum            |
      |       |       | | | |H|N|T|K|N|                               |
      |       |       |0|0|0|0|1|0|1|0|                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                               |               |
      |                    Options                    |    Padding    |
      |                                               |               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                              data(none)                       |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ]]></artwork></figure></t>
       <t>ACK_Client Nugget</t>
      <t><figure><artwork><![CDATA[
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |                         Sequence Number                       |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
      |                                                               |
      |                       Acknowledgment Number                   |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | Data  |       | | | |P|F|R|A|S|                               |
      |Offset |Reserve|F|R|G|S|I|S|C|Y|           Checksum =          |
      |       |       | | | |H|N|T|K|N|       tcp_cal_chksum()        |   
      |       |       |0|0|0|0|1|0|1|0|                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                               |               |
      |                    Options                    |    Padding    |
      |                                               |               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      |               data = MealTicket + ClientSauce                 |
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
			]]></artwork></figure></t>
     </section>
     
<section title = "Data Flow Diagram"> 
       <t><figure><artwork><![CDATA[     
client                                   server
   +                                       +
   |                                       |
   +------------------+                    |
   |                   \SYN                |
   |                    +----------------->+
   |                                       |
   |       [MealTicket] +------------------+
   |       ServerSauce / [SYN+ACK](F,R,G)  |
   +<-----------------+                    |
   |                                       |
   +----------------------+                |
   |          [MealTicket] \ [ACK](F|R|G)  |
   |  ClientSauce+MasterKey +------------->+
   |                                       |
   |                    +------------------+
   |          (Digest) / [ACK]             |
   +<-----------------+                    |
   |                                       |
   |                                       |
   |        [MEAL]Session Established      |
   +-------------------------------------->+
   |                                       |
   |             DATA TRANSFER             |
   |                                       |
   +<--------------------------------------+
   |                                       |
   |                                       |
   +------------------+                    |
   |                   \ [FIN]             |
   |                    +----------------->+
   |                                       |
   |                    +------------------+
   |             [ACK] /                   |
   +<-----------------+ +------------------+
   |             [FIN] /                   |
   +<-----------------+                    |
   |                                       |
   +------------------+                    |
   |                   \ [ACK]             |
   |                    +----------------->+
   |                                       |
   |           Session Terminated          |
   |                                       |
   +                                       +
]]></artwork></figure></t>  
</section>
			<section title="Key Management">
        <t>As you have realised we are using Sauce's as a simpler derivation of Digital Certificate to validate both the client and the Server. The proposed architecture for this is as follows:</t>
         <t><list style="numbers">
           <t>Golden Nugget will create a Repository called "The Sauce Factory" in which Prof.Seth Nelson and Karan will also be the collaborators.</t>
           <t>Each Company head will recieve a template to make their Sauce</t>
           <t>Company's will have have to generate their ServerSauce and each members ClientSauce and upload it to the repository</t>
           <t>Now this replicates how digital certificates work in real world communications</t>
           </list></t>
     </section>
     <section title="Data Transmission">
       <t>Data transmission in the CDP is byte-oriented and occurs after a connection
       has been established. It will pass the data to the next appropriate higher OSI
       model layer for processing as soon as it has any amount of data in order. Due to
       this processing, it closely resembles a stream of data.</t>

       <t>Each packet is assigned a synNumber and ackNumber. These numbers are incremented
       as packets are transmitted amongst the sender and receiver. The sender transmits its
       synNumber, ackNumber, and data to the receiver.  It increments the synNumber based on
       the last synNumber transmitted and the ackNumber based on the synNumber of the receiver.
       The receiver transmits its synNumber and ackNumber back to the sender, acknowledging
       receipt of the data. It increments its synNumber based on the last synNumber transmitted
       and the ackNumber based on the synNumber of the sender.</t>

       <t>These numbers ensure that the data transmitted is in order and allows for the
       retransmissions of lost data. The receiver expects a packet with the next incremented
       synNumber. If the receiver obtains a packet with a synNumber that has already been
       accepted, it will discard the packet. This process ensures that there is no duplicate
       data.</t>

       <t>After transmitting data, the sender reviews the windowList to see the amount of
       additional packets that it can transmit before obtaining acknowledgement from the
       receiver. The receiver can modify the windowList to ensure the data is not being
       sent too fast or too slow.</t>
     </section>

     <section title="Error Handling">
       <t>Error handling in GDP is mainly done through use of two techniques. They are checksum and retransmission.
       Every nugget contains a checksum field in which is used to find corrupted nugget. If the nugget is corrupted, then that nugget is discarded. 
       When a nugget is missing, delayed to deliver to receiver, or corrupted when it is checked by receiver, then that segment is retransmitted again.</t>
     </section>

     <section title="States">
       <t>In the GDP, the connection goes through various states. Note that each event
       triggers the movement from one state to another. Change of state is caused by user input, any flags or nugget drops. </t>
       
       <t>The states and their descriptions are: </t>
	     <t><list style="numbers">
         <t>LISTEN:  waiting for a connection request</t>
         <t>SYN-SENT:  waiting for a response after having sent a connection
         request</t>
         <t>SYN-RECEIVED: waiting for a connection request acknowledgment after having
         both received a response and sent a connection request</t>
         <t>ESTABLISHED:  a connection that allows the transfer of data to the user</t>
         <t>FIN-WAIT-1: When the [FIN] nugget has been sent to the server, client goes to this state</t>
         <t>FIN-WAIT-2: Wneh server has sent the acknowledgment for the received [FIN] and is ready to send the [FIN] nugget to the client, it is in this state; When the server has sent the acknowledgemnt and the [FIN] nugget,
         this state is achieved </t>
         <t>CLOSED:  represents a closed connection state </t>
       </list></t>
     </section>
         </section>
   
   <section title="Security Considerations">
     <t>The GDP seeks to transport data reliably over the network by implement security at the TCP layer.</t>
     
     <t>Some potential attacks against the GDP include: insider threat, TCP Replay and denial of service
     attacks. The GDP is susceptible to denial of service attacks through the flooding of synFlag packets. </t>
   </section>

 </middle>

 <!--  *****BACK MATTER ***** -->

 <back>
   <!-- References split into informative and normative -->

   <!-- There are 2 ways to insert reference entries from the citation libraries:
    1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
    2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
       (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

    Both are cited textually in the same manner: by using xref elements.
    If you use the PI option, xml2rfc will, by default, try to find included files in the same
    directory as the including file. You can also define the XML_LIBRARY environment variable
    with a value containing a set of directories to search.  These can be either in the local
    filing system or remote ones accessed by http (http://domain/dir/... ).-->

   <references title="Normative References">
     <!--?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
     &RFC0793;
     <!--&PRFC001;-->
   </references>

 </back>

</rfc>
