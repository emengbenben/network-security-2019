


Network Working Group                                     G. Nugget, Ed.
Request for Comments: 1                 JHU Network Security Spring 2019
Category: Standards Track                                     March 2019


               GoNuts Client Server Application Framework


Status of this Memo

   This document specifies a Playgrounds standards track protocol for
   the Playground Experiment, and requests discussion and suggestions
   for improvements.  Distribution of this memo is unlimited.

Copyright Notice

   Copyright (C) Seth James Nielson (2019).  All Rights Reserved.


































Nugget                       Standards Track                    [Page 1]

RFC 1                            PRFC's                       March 2019


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
   2.  PACKET SPECIFICATIONS . . . . . . . . . . . . . . . . . . . . . 3
     2.1.  New User Packet . . . . . . . . . . . . . . . . . . . . . . 3
     2.2.  Transaction . . . . . . . . . . . . . . . . . . . . . . . . 4
     2.3.  Registered User . . . . . . . . . . . . . . . . . . . . . . 5
     2.4.  Error Handling  . . . . . . . . . . . . . . . . . . . . . . 6
     2.5.  Data Packets  . . . . . . . . . . . . . . . . . . . . . . . 6
     2.6.  Machine State . . . . . . . . . . . . . . . . . . . . . . . 7
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 8
   Intellectual Property and Copyright Statements  . . . . . . . . . . 9







































Nugget                       Standards Track                    [Page 2]

RFC 1                            PRFC's                       March 2019


1.  Introduction

   The Golden Nugget Casino PRFC defines the client-server framework for
   the application layer which can be implemented by all the
   participants in the playground network.  This PRFC will cover all the
   fields essential for every organization to designs its own client
   side of the application.  This particular class structure is centered
   around our application, but we provide enough room to implement the
   same fields into your respective companies applications.


2.  PACKET SPECIFICATIONS

2.1.  New User Packet

   The new user packet defines the fields that are required for
   registering a user who is not previously registered.  Already
   registered users will not be able to register and password, username
   and emails checks will be done here.

   class NewUser(PacketType):

   DEFINITION_IDENTIFIER = "NuggetFramework.type"

   DEFINITION_VERSION = "1.0"

   Body = [

   ("Email", STRING),

   ("Pwd", STRING),

   ("Conf_Pwd", STRING),

   ("Company_Name", STRING),

   ]

   NewUser:

   Email: This is the email address used for registering.  A check will
   be done as to whether it is a legitimate email address or not using
   the syntax- abc@jhu.edu where '@jhu.edu' is mandatory and a check on
   the JHU email ID will be done.  We are implementing this verification
   because email is going to be the username to login to our
   applications.  If you prefer to use an username instead, you are free
   to use an username in the email field.




Nugget                       Standards Track                    [Page 3]

RFC 1                            PRFC's                       March 2019


   Pwd: The password needs to have atleast 6 characters containing both
   characters and numbers (atleast 1 character and 1 number).  This will
   be stored as a hash value on the server side.  This ensures that the
   respective company employees cannot view the passwords that the users
   set for their account.

   Conf_Pwd: This is to confirm the password entered in the previous
   field.  Both of these must match to validate the password.  This will
   also be stored as a hash value.  To elaborate, the hash of the Pwd
   field will be computed and stored into a buffer PwdBuf[] and then the
   Conf_Pwd fields hash will be matched with PwdBuff[].  If there is a
   match and the email does not exist already the registration
   credentials are accepted or else the corresponding error codes will
   be sent to the client.

   Company_Name: The name of the company must be mentioned aso we can
   keep a track of which user is currently playing and which company is
   earning more money so we can accordingly adjust game levels for each
   company separately.  This field can be ustilized by your company for
   future analytics purposes.

2.2.  Transaction

   This class is used to define information that will be required when
   verifying a transaction between the client and server.  Any
   transaction related to the client, server and the bank will be
   included in this packet.

   class Transaction(PacketType):

   DEFINITION_IDENTIFIER = "NuggetFramework.type"

   DEFINITION_VERSION = "1.0"

   Body = [

   ("Token_id", STRING),

   ("Bet", INT16),

   ("GameID", STRING)

   ("Extra" INT16)

   ]

   Transaction:




Nugget                       Standards Track                    [Page 4]

RFC 1                            PRFC's                       March 2019


   Token_id: This field specifies the token received from the
   transaction between the bank and the client.  This is synonymous to a
   reciept number which the bank will generate and company will trust in
   the backing authority that the reciept number is valid and the amount
   has been successfully transferred into our bank account.

   Bet: This field specifies the bet placed by the client, this can also
   be used by companies in other forms for inputing money to be used.

   GameID: This field specifies the game that the client wishes to play.
   This can be modified to the option that species the services the user
   wants to use

   Extra: This is a field with the deault value set to NULL.  It can be
   used to cater to any other transaction related implementations
   required by your company.

2.3.  Registered User

   The Registered user packet definws the fields that are required for a
   registered user to login in.

   class RegisteredUser(PacketType):

   DEFINITION_IDENTIFIER = "NuggetFramework.type"

   DEFINITION_VERSION = "1.0"

   Body = [

   ("Email",STRING)

   ("Password",STRING)

   ]

   Registered User:

   Email: This is the email address used login in.  A check will be done
   as to whether it is stored in the database.

   Pwd: The hash of the input will be mattched to the hask of the packet
   stored and whether matches the corresponding Email ID.  If not the
   resspective error will be thrown







Nugget                       Standards Track                    [Page 5]

RFC 1                            PRFC's                       March 2019


2.4.  Error Handling

   This class is to define error handling packet which is sent to client
   from server.  The server will send the message and an error code too.
   It is the companiues choice to take the error code as input and send
   out the related error message or use the servers message directly.
   One other thing to note is that there might be other eroors that are
   specific to your applications, hence this class only species the most
   generic ones.

   class ErrorHandling(PacketType):

   DEFINITION_IDENTIFIER = "NuggetFramework.type"

   DEFINITION_VERSION = "1.0"

   Body = [

   ("Message",STRING)

   ("ErrorCode", INT)

   ]

   o  CODE - Can be set to 1,2,3,4,5,6,7

   o

      1.  Username already exists

      2.  Invalid email address

      3.  Passwords do not match

      4.  Password invalid

      5.  Invalid Amount

      6.  Insufficient Balance

      7.  Invalid Reciept Number

2.5.  Data Packets

   Unlike other packet types, this class will be used to only focus on
   the application related data.  The data names we provided are meant
   to cater to our game needs but can also be used to implement other
   applications over these variables.  We include Buffers, Strings and



Nugget                       Standards Track                    [Page 6]

RFC 1                            PRFC's                       March 2019


   integers which should cover most of the data types to transmit data
   for your applications.

   class DataPackets(PacketType):

   DEFINITION_IDENTIFIER = "NuggetFramework.type"

   DEFINITION_VERSION = "1.0"

   Body = [

   ("number", UInt16),

   ("Status", Char),

   ("choice", int),

   ("suitcase", buffer),

   ("M_offered", int),

   ("M_Won", int),

   ("data", string)

   ]

   number: An integer type data

   Status: A charactor type data

   choice: An integer type data

   suitcase: A buffer

   M_offered: An Integer

   M_Won: An Integer

   data: A String

2.6.  Machine State

   This class defines the structure for the variables to help keep track
   of the machine state.  Machine state is a crucial class to ensure
   session is created and the users progress in the application is going
   to be tracked.




Nugget                       Standards Track                    [Page 7]

RFC 1                            PRFC's                       March 2019


   class MacineState(PacketType):

   DEFINITION_IDENTIFIER = "NuggetFramework.type"

   DEFINITION_VERSION = "1.0"

   Body = [

   ("state", string),

   ("session_id", int),

   ("Expire_time", timestamp),

   ("Login_time",timestamp),

   ("extra", string),

   ]

   State: It is a variable that is used to set the current state of the
   user as in LoggedIn, LoggedOut, etc..

   Session_id: This is used to keep track of the users progress in the
   game and to keep the session running

   Expire_time: Timestamp that is used to terminate the session after
   inactivity

   Login_time: Timestamp used to record the login time

   extra: This is provided to accomodate other machine state variables
   that may be required for the other games


Author's Address

   Golden Nugget (editor)
   JHU Network Security Spring 2019
   JHU Malone MSSI Lab
   Baltimore, MD  21218
   USA

   Phone: +1 123-456-7891
   Email: golden_nugget@jhu.edu






Nugget                       Standards Track                    [Page 8]

RFC 1                            PRFC's                       March 2019


Full Copyright Statement

   Copyright (C) Seth James Nielson (2019).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the PLAYGROUND experiment or
   other associated organizations, except by explicit permission.

   The limited permissions granted above are perpetual and will not be
   revoked by SETH JAMES NIELSON or his successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and SETH JAMES NIELSON and associated academic
   institutions DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The PLAYGROUND framework and student submissions for PLAYGROUND are
   intended to be free of any intellectual property conflicts.  All
   submitting parties, especially students, are not allowed to submit
   source code, specifications, or other components that are known to be
   protected by copyright, patents, or other IP mechanisms.  Students
   submitting creative content grant shared rights and ownership of
   their content to the PLAYGROUND project.  Specifically, any
   submission can be used in future educational settings including
   subsequent PLAYGROUND experiments.

   Any interested party is invited to bring to the experiment director's
   attention any copyrights, patents or patent applications, or other
   proprietary rights which may cover technology that may be currently
   in use without permission.

   It should be noted that these statements have not been reviewed by
   legal counsel.  Moreover, the academic institutions at which
   PLAYGROUND experiments take place may have additional or even
   conflicting copyright and intellectual property rules.  Accordingly,
   concerned parties may need to contact their own lawyer and/or
   resources at their institution to understand the rights and



Nugget                       Standards Track                    [Page 9]

RFC 1                            PRFC's                       March 2019


   limitations associated with code donated to a PLAYGROUND experiment.


















































Nugget                       Standards Track                   [Page 10]

